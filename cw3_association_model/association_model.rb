# frozen_string_literal: true

z0 = [-1.0, -1.0, -1.0, -1.0, -1.0,
      -1.0,  1.0,  1.0,  1.0, -1.0,
      -1.0,  1.0, -1.0,  1.0, -1.0,
      -1.0,  1.0,  1.0,  1.0, -1.0,
      -1.0, -1.0, -1.0, -1.0, -1.0]

z1 = [-1.0, -1.0, -1.0, -1.0, -1.0,
      -1.0,  1.0,  1.0, -1.0, -1.0,
      -1.0, -1.0,  1.0, -1.0, -1.0,
      -1.0, -1.0,  1.0, -1.0, -1.0,
      -1.0, -1.0, -1.0, -1.0, -1.0]

@w = Array.new(25) { [] }

25.times do |i|
  25.times do |j|
    @w[i][j] = z0[i] * z0[j] / 25 + z1[i] * z1[j] / 25
  end
end

def association_model(u)
  mu = []
  25.times { |i| mu[i] = @w[i].each_with_index.map { |e, j| e * u[j] }.sum }
  mu.map! { |e| e.negative? ? -1.0 : 1.0 }

  25.times do |i|
    puts if (i % 5).zero?
    print(mu[i] == 1 ? '■' : '□')
  end
  puts
end

u0 = [-1.0, -1.0, -1.0, -1.0, -1.0,
      -1.0,  1.0,  1.0,  1.0, -1.0,
      -1.0,  1.0, -1.0,  1.0, -1.0,
      -1.0,  1.0,  1.0,  1.0, -1.0,
      -1.0, -1.0, -1.0, -1.0, -1.0]

u1 = [-1.0, -1.0, -1.0, -1.0, -1.0,
      -1.0,  1.0,  1.0, -1.0, -1.0,
      -1.0, -1.0,  1.0, -1.0, -1.0,
      -1.0, -1.0,  1.0, -1.0, -1.0,
      -1.0, -1.0, -1.0, -1.0, -1.0]

u0_prime = [-1.0,  1.0,  1.0,  1.0, -1.0,
            -1.0,  1.0, -1.0,  1.0, -1.0,
            -1.0,  1.0, -1.0,  1.0, -1.0,
            -1.0,  1.0,  1.0,  1.0, -1.0,
            -1.0, -1.0, -1.0, -1.0, -1.0]

u1_prime = [-1.0, -1.0,  1.0, -1.0, -1.0,
            -1.0, -1.0,  1.0, -1.0, -1.0,
            -1.0, -1.0,  1.0, -1.0, -1.0,
            -1.0, -1.0,  1.0, -1.0, -1.0,
            -1.0, -1.0, -1.0, -1.0, -1.0]

association_model(u0)
association_model(u1)
association_model(u0_prime)
association_model(u1_prime)
