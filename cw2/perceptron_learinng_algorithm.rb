# frozen_string_literal: true

def perceptron_learning_algorithm(c)
  u = []

  u[0] = [0.0, 0.0, 0.0, 0.0, 0.0,
          0.0, 1.0, 1.0, 1.0, 0.0,
          0.0, 1.0, 0.0, 1.0, 0.0,
          0.0, 1.0, 1.0, 1.0, 0.0,
          0.0, 0.0, 0.0, 0.0, 0.0, 1.0]

  u[1] = [0.0, 0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0, 0.0,
          1.0, 1.0, 1.0, 0.0, 0.0,
          1.0, 0.0, 1.0, 0.0, 0.0,
          1.0, 1.0, 1.0, 0.0, 0.0, 1.0]

  u[2] = [0.0, 0.0, 0.0, 0.0, 0.0,
          0.0, 1.0, 1.0, 0.0, 0.0,
          0.0, 0.0, 1.0, 0.0, 0.0,
          0.0, 0.0, 1.0, 0.0, 0.0,
          0.0, 0.0, 1.0, 0.0, 0.0, 1.0]

  u[3] = [0.0, 0.0, 1.0, 1.0, 0.0,
          0.0, 0.0, 0.0, 1.0, 0.0,
          0.0, 0.0, 0.0, 1.0, 0.0,
          0.0, 0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0, 0.0, 1.0]

  u[4] = [0.0, 0.0, 0.0, 0.0, 0.0,
          1.0, 1.0, 0.0, 0.0, 0.0,
          0.0, 1.0, 0.0, 0.0, 0.0,
          0.0, 1.0, 0.0, 0.0, 0.0,
          0.0, 1.0, 0.0, 0.0, 0.0, 1.0]

  t = 0
  counter = 0
  w = [1] * 26

  while counter != 5
    z = t % 5 < 2 ? 0.0 : 1.0
    y = w.each_with_index.map { |wj, j| wj * u[t % 5][j] }.sum.negative? ? 0.0 : 1.0
    w = w.each_with_index.map { |wi, i| wi + c * (z - y) * u[t % 5][i] }
    counter = z == y ? counter + 1 : 0
    t += 1
  end

  puts "t: #{t + 1}, w: #{w}"
end

perceptron_learning_algorithm(1.0)
perceptron_learning_algorithm(0.1)
perceptron_learning_algorithm(0.01)
